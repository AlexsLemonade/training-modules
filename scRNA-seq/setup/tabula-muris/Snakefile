# Workflow for downloading and preprocessing Tabula Muris data
configfile: "config.yaml"
workdir: config["base_dir"]

rule targets:
    input:
        "TM_droplet_metadata.csv",
        expand("qc-reports/alevinQC/{run_id}_alevinqc.html", run_id = config["run_ids"]),
        "fastq/10X_P4_3"

rule get_metadata:
    output:
        "TM_droplet_metadata.csv"
    shell:
        "wget {config[metadata_url]} -O {output}"

rule get_bamfile:
    output:
        temp("bam/{file}")
    shell:
        "aws --no-sign-request"
        " s3 cp {config[s3_url]}/{wildcards.file} {output}"

rule bam_to_fastq:
    input:
        "bam/{run_id}_possorted_genome.bam"
    output:
        directory("fastq/{run_id}")
    threads: 4
    shell:
        "bamtofastq --nthreads={threads} {input} {output};"
        # bamtofastq is super annoying in how it names things, so we will take the fastq files and move/rename them.
        # only keeping read 1 and read 2
        "files=`find fastq/{wildcards.run_id} -name *_R[1,2]_*.fastq.gz`;"
        "for file in $files; do"
        " mv $file {output}/$(basename $file | sed s/bamtofastq_S1/{wildcards.run_id}/);"
        "done;"
        # remove subdirectory with other files
        "rm -r {output}/{wildcards.run_id}_MissingLibrary_*"

rule alevin:
    input:
        fastq_dir = "fastq/{run_id}",
        index = config["salmon_index"],
        tx2gene = config["tx2gene"]
    output:
        directory("alevin-quant/{run_id}")
    threads: 10
    shell:
        "salmon alevin -l ISR"
        " -i {input.index}"
        " -1 {input.fastq_dir}/{wildcards.run_id}_L*_R1_*.fastq.gz "
        " -2 {input.fastq_dir}/{wildcards.run_id}_L*_R2_*.fastq.gz "
        " --chromium"
        " -p {threads}"
        " -o {output}"
        " --tgMap {input.tx2gene}"
        " --dumpFeatures"

rule alevinQC:
    input:
        "alevin-quant/{run_id}"
    output:
        "qc-reports/alevinQC/{run_id}_alevinqc.html"
    shell:
        # add a null whitelist file if none was generated (append to protect against logic errors)
        "[ -e {input}/alevin-quant/whitelist.txt ] ||"
        " echo 'NNNNNNNNNNNNNNNN' >> {input}/alevin-quant/whitelist.txt ; "
        # run alevinQC
        "Rscript -e "
        " 'alevinQC::alevinQCReport("
        "    baseDir = \"{input}\", "
        "    sampleId = \"{wildcards.run_id}\", "
        "    outputFile = \"{wildcards.run_id}_alevinqc.html\", "
        "    outputDir = \"qc-reports/alevinQC\", "
        "    forceOverwrite = TRUE)'"
